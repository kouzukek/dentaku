{"version":3,"sources":["components/display.tsx","app/store.ts","components/key.tsx","components/keyboard.tsx","components/debug.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Display","display","useSelector","state","main","style","textAlign","paddingRight","dentaku","createSlice","name","initialState","acc","cur","decimal","op","previous","reducers","pushNumber","number","includes","pushNumber2Cur","payload","pushOperator","lhs","rhs","operator","resetCur","bignumber","plus","toString","minus","times","dividedBy","devide","pushClear","pushDot","store","configureStore","reducer","width","NumericKey","dispatch","useDispatch","onClick","actions","DotKey","disabled","ClearKey","OperatorKey","primary","type","undefined","Keyboard","arr","cols","ret","i","push","slice","Math","min","length","split","map","col","key","node","span","Debug","JSON","stringify","App","Content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d7a0139a.chunk.js","sourcesContent":["import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nexport const Display = () => {\n  const display = useSelector((state) => state.main.display);\n  return (\n    <div\n      style={{\n        textAlign: \"right\",\n        paddingRight: \"3px\",\n      }}\n    >\n      &nbsp;{display}\n    </div>\n  );\n};\n","import { createSlice, configureStore, PayloadAction } from \"@reduxjs/toolkit\";\r\nimport bignumber from \"bignumber.js\";\r\n\r\ntype NumericType = string;\r\nexport type digit = 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\r\nexport type operator = \"+\" | \"-\" | \"*\" | \"/\" | \"=\";\r\n\r\nexport interface State {\r\n  acc: NumericType;\r\n  cur: NumericType;\r\n  decimal: boolean;\r\n  op: operator;\r\n  previous: \"number\" | \"operator\" | \"equaled\";\r\n  display: string;\r\n}\r\n\r\nconst pushNumber2Cur = (state: State, number: digit) => {\r\n  if (state.decimal === false) {\r\n    if (state.cur === \"0\") {\r\n      state.cur = `${number}`;\r\n    } else {\r\n      state.cur = `${state.cur}${number}`;\r\n    }\r\n  } else {\r\n    if (state.cur.includes(\".\")) {\r\n      state.cur = `${state.cur}${number}`;\r\n    } else {\r\n      state.cur = `${state.cur}.${number}`;\r\n    }\r\n  }\r\n};\r\n\r\nconst pushDot = (state: State) => {\r\n  if (state.decimal === false) state.decimal = true;\r\n};\r\n\r\nconst resetCur = (state: State) => {\r\n  state.cur = \"0\";\r\n  state.decimal = false;\r\n};\r\n\r\nconst plus = (lhs: string, rhs: string) =>\r\n  new bignumber(lhs).plus(new bignumber(rhs)).toString();\r\n\r\nconst minus = (lhs: string, rhs: string) =>\r\n  new bignumber(lhs).minus(new bignumber(rhs)).toString();\r\n\r\nconst times = (lhs: string, rhs: string) =>\r\n  new bignumber(lhs).times(new bignumber(rhs)).toString();\r\n\r\nconst devide = (lhs: string, rhs: string) =>\r\n  new bignumber(lhs).dividedBy(new bignumber(rhs)).toString();\r\n\r\nconst initialize = (): State => ({\r\n  acc: \"0\",\r\n  cur: \"0\",\r\n  decimal: false,\r\n  op: \"=\",\r\n  previous: \"equaled\",\r\n  display: \"0\",\r\n});\r\n\r\nexport const dentaku = createSlice({\r\n  name: \"main\",\r\n  initialState: initialize(),\r\n  reducers: {\r\n    pushNumber: (state, { payload: number }: PayloadAction<digit>) => {\r\n      pushNumber2Cur(state, number);\r\n      state.display = state.cur;\r\n      state.previous = \"number\";\r\n    },\r\n    pushOperator: (state, { payload: operator }: PayloadAction<operator>) => {\r\n      switch (operator) {\r\n        case \"+\":\r\n        case \"-\":\r\n        case \"*\":\r\n        case \"/\":\r\n          state.acc = state.cur;\r\n          resetCur(state);\r\n          break;\r\n        case \"=\":\r\n          switch (state.op) {\r\n            case \"+\":\r\n              state.cur = plus(state.acc, state.cur);\r\n              state.acc = \"0\";\r\n              state.display = state.cur;\r\n              break;\r\n            case \"-\":\r\n              state.cur = minus(state.acc, state.cur);\r\n              state.acc = \"0\";\r\n              state.display = state.cur;\r\n              break;\r\n            case \"*\":\r\n              state.cur = times(state.acc, state.cur);\r\n              state.acc = \"0\";\r\n              state.display = state.cur;\r\n              break;\r\n            case \"/\":\r\n              state.cur = devide(state.acc, state.cur);\r\n              state.acc = \"0\";\r\n              state.display = state.cur;\r\n              break;\r\n          }\r\n          break;\r\n      }\r\n      state.op = operator;\r\n      state.previous = \"operator\";\r\n    },\r\n    pushClear: () => initialize(),\r\n    pushDot: (state) => {\r\n      pushDot(state);\r\n      state.display = state.cur;\r\n      state.previous = \"number\";\r\n    },\r\n  },\r\n});\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    main: dentaku.reducer,\r\n  },\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Button } from \"antd\";\n\nimport { dentaku, digit, operator } from \"../app/store\";\n\nconst style = {\n  width: \"100%\",\n};\n\nexport const NumericKey: React.FC<{ number: digit }> = ({ number }) => {\n  const dispatch = useDispatch();\n  const onClick = () => {\n    dispatch(dentaku.actions.pushNumber(number));\n  };\n  return (\n    <Button onClick={onClick} style={style}>\n      {number}\n    </Button>\n  );\n};\n\nexport const DotKey: React.FC = () => {\n  const disabled = useSelector((state) => state.main.decimal);\n  const dispatch = useDispatch();\n  const onClick = () => {\n    dispatch(dentaku.actions.pushDot());\n  };\n  return (\n    <Button onClick={onClick} style={style} disabled={disabled}>\n      .\n    </Button>\n  );\n};\n\nexport const ClearKey: React.FC = () => {\n  const dispatch = useDispatch();\n  const onClick = () => {\n    dispatch(dentaku.actions.pushClear());\n  };\n  return (\n    <Button onClick={onClick} style={style}>\n      C\n    </Button>\n  );\n};\n\nexport const OperatorKey: React.FC<{ operator: operator }> = ({ operator }) => {\n  const primary = useSelector((state) => state.main.op) === operator;\n  const dispatch = useDispatch();\n  const onClick = () => {\n    dispatch(dentaku.actions.pushOperator(operator));\n  };\n  return (\n    <Button onClick={onClick} style={style} type={primary ? \"primary\" : undefined}>\n      {operator}\n    </Button>\n  );\n};\n\nexport const DummyKey: React.FC<{ text: string }> = ({ text }) => {\n  return <Button style={{ width: \"100%\" }}>{text}</Button>;\n};\n","import React from \"react\";\nimport { Row, Col } from \"antd\";\n\nimport { NumericKey, DotKey, OperatorKey, ClearKey } from \"./key\";\n\nconst split = <T extends any>(arr: Array<T>, cols: number): T[][] => {\n  const ret: T[][] = [];\n\n  let i = 0;\n\n  while (true) {\n    ret.push(arr.slice(i, Math.min(i + cols, arr.length)));\n    if (i + cols >= arr.length) break;\n    i += cols;\n  }\n\n  return ret;\n};\n\nexport const Keyboard = () => (\n  <>\n    {split(\n      [\n        <ClearKey />,\n        <></>,\n        <></>,\n        <></>,\n        <NumericKey number={7} />,\n        <NumericKey number={8} />,\n        <NumericKey number={9} />,\n        <OperatorKey operator=\"/\" />,\n        <NumericKey number={4} />,\n        <NumericKey number={5} />,\n        <NumericKey number={6} />,\n        <OperatorKey operator=\"*\" />,\n        <NumericKey number={1} />,\n        <NumericKey number={2} />,\n        <NumericKey number={3} />,\n        <OperatorKey operator=\"-\" />,\n        <NumericKey number={0} />,\n        <DotKey />,\n        <OperatorKey operator=\"=\" />,\n        <OperatorKey operator=\"+\" />\n      ],\n      4\n    ).map((col, i) => (\n      <Row key={i}>\n        {col.map((node, i) => (\n          <Col span={6} key={i}>\n            {node}\n          </Col>\n        ))}\n      </Row>\n    ))}\n  </>\n);\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nexport const Debug = () => {\n  const state = useSelector((state) => state.main);\n  return <pre>{JSON.stringify(state, null, 4)}</pre>;\n};\n","import React from \"react\";\r\nimport { Layout } from \"antd\";\r\n\r\nimport { Display } from \"./components/display\";\r\nimport { Keyboard } from \"./components/keyboard\";\r\nimport { Debug } from \"./components/debug\";\r\nimport \"./index.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout>\r\n      <Layout.Content style={{ width: \"270px\" }}>\r\n        <Display />\r\n        <Keyboard />\r\n        <Debug />\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}