{"version":3,"sources":["app/store.ts","components/display.tsx","components/key.tsx","components/keyboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["mainSlice","createSlice","name","initialState","display","reducers","pushNumber","state","payload","pushOperator","eval","pushClear","pushDot","store","configureStore","reducer","main","Display","useSelector","style","textAlign","paddingRight","NumericKey","number","dispatch","useDispatch","onClick","actions","width","DotKey","ClearKey","OperatorKey","operator","Keyboard","arr","cols","ret","i","push","slice","Math","min","length","split","map","col","key","node","span","App","Content","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f024dbb.chunk.js","sourcesContent":["import {\r\n  createSlice,\r\n  configureStore,\r\n  ThunkAction,\r\n  Action,\r\n  PayloadAction\r\n} from \"@reduxjs/toolkit\";\r\n\r\nexport const mainSlice = createSlice({\r\n  name: \"main\",\r\n  initialState: { display: \"\" },\r\n  reducers: {\r\n    pushNumber: (state, { payload }: PayloadAction<number>) => {\r\n      state.display = `${state.display}${payload}`;\r\n    },\r\n    pushOperator: (state, { payload }: PayloadAction<string>) => {\r\n      if (payload === \"=\")\r\n        // eslint-disable-next-line  no-eval\r\n        state.display = eval(state.display);\r\n      else state.display = `${state.display}${payload}`;\r\n    },\r\n    pushClear: state => {\r\n      state.display = \"\";\r\n    },\r\n    pushDot: state => {}\r\n  }\r\n});\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    main: mainSlice.reducer\r\n  }\r\n});\r\n\r\nexport type RootState = ReturnType<typeof store.getState>;\r\nexport type AppThunk<ReturnType = void> = ThunkAction<\r\n  ReturnType,\r\n  RootState,\r\n  unknown,\r\n  Action<string>\r\n>;\r\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\n\nexport const Display = () => {\n  const display = useSelector(state => state.main.display);\n  return <div style={{ textAlign: \"right\", paddingRight: \"3px\" }}>&nbsp;{display}</div>;\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Button } from \"antd\";\n\nimport { mainSlice } from \"../app/store\";\n\nexport const NumericKey: React.FC<{ number: number }> = ({ number }) => {\n  const dispatch = useDispatch();\n  const onClick = () => {\n    dispatch(mainSlice.actions.pushNumber(number));\n  };\n  return (\n    <Button onClick={onClick} style={{ width: \"100%\" }}>\n      {number}\n    </Button>\n  );\n};\n\nexport const DotKey: React.FC = () => {\n  const dispatch = useDispatch();\n  const onClick = () => {\n    dispatch(mainSlice.actions.pushDot());\n  };\n  return (\n    <Button onClick={onClick} style={{ width: \"100%\" }}>\n      .\n    </Button>\n  );\n};\n\nexport const ClearKey: React.FC = () => {\n  const dispatch = useDispatch();\n  const onClick = () => {\n    dispatch(mainSlice.actions.pushClear());\n  };\n  return (\n    <Button onClick={onClick} style={{ width: \"100%\" }}>\n      C\n    </Button>\n  );\n};\n\nexport const OperatorKey: React.FC<{ operator: string }> = ({ operator }) => {\n  const dispatch = useDispatch();\n  const onClick = () => {\n    dispatch(mainSlice.actions.pushOperator(operator));\n  };\n  return (\n    <Button onClick={onClick} style={{ width: \"100%\" }}>\n      {operator}\n    </Button>\n  );\n};\n\nexport const DummyKey: React.FC<{ text: string }> = ({ text }) => {\n  return <Button style={{ width: \"100%\" }}>{text}</Button>;\n};\n","import React from \"react\";\nimport { Row, Col } from \"antd\";\n\nimport { NumericKey, DotKey, OperatorKey, ClearKey } from \"./key\";\n\nconst split = <T extends any>(arr: Array<T>, cols: number): T[][] => {\n  const ret: T[][] = [];\n\n  let i = 0;\n\n  while (true) {\n    ret.push(arr.slice(i, Math.min(i + cols, arr.length)));\n    if (i + cols >= arr.length) break;\n    i += cols;\n  }\n\n  return ret;\n};\n\nexport const Keyboard = () => (\n  <>\n    {split(\n      [\n        <ClearKey />,\n        <></>,\n        <></>,\n        <></>,\n        <NumericKey number={7} />,\n        <NumericKey number={8} />,\n        <NumericKey number={9} />,\n        <OperatorKey operator=\"/\" />,\n        <NumericKey number={4} />,\n        <NumericKey number={5} />,\n        <NumericKey number={6} />,\n        <OperatorKey operator=\"*\" />,\n        <NumericKey number={1} />,\n        <NumericKey number={2} />,\n        <NumericKey number={3} />,\n        <OperatorKey operator=\"-\" />,\n        <NumericKey number={0} />,\n        <DotKey />,\n        <OperatorKey operator=\"=\" />,\n        <OperatorKey operator=\"+\" />\n      ],\n      4\n    ).map((col, i) => (\n      <Row key={i}>\n        {col.map((node, i) => (\n          <Col span={6} key={i}>\n            {node}\n          </Col>\n        ))}\n      </Row>\n    ))}\n  </>\n);\n","import React from \"react\";\r\nimport { Layout } from \"antd\";\r\n\r\nimport { Display } from \"./components/display\";\r\nimport { Keyboard } from \"./components/keyboard\";\r\nimport \"./index.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout>\r\n      <Layout.Content style={{width:'270px'}}>\r\n        <Display />\r\n        <Keyboard />\r\n      </Layout.Content>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { store } from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}